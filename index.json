[{"content":"一、诗经\nNO.1\n《诗经·郑风·子衿》\n青青子衿，悠悠我心。\n纵我不往，子宁不嗣音？\n青青子佩，悠悠我思。\n纵我不往，子宁不来？\n挑兮达兮，在城阙兮。\n一日不见，如三月兮。\n此诗开后世小说言情心理描绘之先河。\nNO.2\n《诗经·野有蔓草》\n野有蔓草，零露漙兮。（tuán）\n有美一人，清扬婉兮。\n邂逅相遇，适我愿兮。\n野有蔓草，零露瀼瀼。\n有美一人，婉如清扬。\n邂逅相遇，与子偕臧。zāng\n“婉如清扬、清扬婉兮”，千古传神之笔。\nNO.3\n《绸缪》\n绸缪束薪，三星在天。今夕何夕，见此良人？子兮子兮，如此良人何？\n绸缪束刍，三星在隅。今夕何夕，见此邂逅？子兮子兮，如此邂逅何？\n绸缪束楚，三星在户。今夕何夕，见此粲者？子兮子兮，如此粲者何？\n二、先秦歌谣两首\nNO.4\n《卿云歌》\n卿云烂兮，糺（jiū）缦缦兮。\n日月光华，旦复旦兮。\n明明上天，烂然星陈。\n日月光华，弘于一人。\n这是一首远古歌谣，“卿云烂兮，糺缦缦兮”写得多美，让人感觉到什么是灿若云霞。整首诗辞藻华美，格调光辉而灿烂。\n楚云卿 22 次咨询 5.0 诗词优秀回答者 502141 次赞同 去咨询\nNO.5\n《越人歌》\n今夕何夕兮，搴舟中流。\n今日何日兮，得与王子同舟。\n蒙羞被好兮，不訾（zī）诟耻。\n心几烦而不绝兮，知得王子。\n山有木兮木有枝，心悦君兮君不知。\ns\n三、乐府 NO.6\n《西洲曲》\n忆梅下西洲，折梅寄江北。\n单衫杏子红，双鬓鸦雏色。\n西洲在何处？两桨桥头渡。\n日暮伯劳飞，风吹乌臼树。\n树下即门前，门中露翠钿。\n开门郎不至，出门采红莲。\n采莲南塘秋，莲花过人头。\n低头弄莲子，莲子青如水。\n置莲怀袖中，莲心彻底红。\n忆郎郎不至，仰首望飞鸿。\n鸿飞满西洲，望郎上青楼。\n楼高望不见，尽日栏杆头。\n栏杆十二曲，垂手明如玉。\n卷帘天自高，海水摇空绿。\n海水梦悠悠，君愁我亦愁。\n南风知我意，吹梦到西洲。\n南朝民歌中的压卷之作，也是千古情诗绝唱。整首诗语言曼妙流畅、婉曲清丽，情思细腻、摇荡人心。无论从语言、音韵、情感、形式各方面，都是同时期民歌中最精致成熟的，具有很高的艺术水平。末句“南风知我意，吹梦到西洲。”垂映千古，情思绵绵不绝。\nNO.7《乐府·鼓吹曲辞·上邪》 上邪！ 我欲与君相知， 长命无绝衰。 山无陵， 江水为竭， 冬雷震震， 夏雨雪， 天地合， 乃敢与君绝！\n言短情长，撼人心魄，读来令人心神激荡。那种坚定、澎湃的语气，仿佛压抑了许久的感情，一下奔涌而出，气势奔放，横扫古今。让人可以鲜明感受到一个刚烈、坚定，不屈不挠的女子形象。\nNO.8《乐府·相和歌辞·白头吟》 皑如山上雪，皎若云间月。 闻君有两意，故来相决绝。 今日斗酒会，明旦沟水头。 躞蹀（xièdié）御沟上，沟水东西流。 凄凄复凄凄，嫁娶不须啼。 愿得一心人，白头不相离。 竹竿何袅袅，鱼尾何簁簁（shāi）。 男儿重意气，何用钱刀为。\nNO.9《巫山高》 巫山高，高以大。 淮水深，难以逝。 我欲东归，害梁不为。 我集无高曳，水何梁汤汤回回。 临水远望，泣下沾衣。 远道之人心思归，谓之何。\nNO.10《江南》 江南可采莲，莲叶何田田，鱼戏莲叶间。 鱼戏莲叶东，鱼戏莲叶西，鱼戏莲叶南，鱼戏莲叶北。\n","permalink":"https://loyayz.github.io/posts/the_one-%E5%8D%9A%E5%AE%A2%E8%BE%97%E8%BD%AC%E7%BB%8F%E5%8E%86/","summary":"一、诗经 NO.1 《诗经·郑风·子衿》 青青子衿，悠悠我心。 纵我不往，子宁不嗣音？ 青青子佩，悠悠我思。 纵我不往，子宁不来？ 挑兮达兮，在城阙兮。 一日不见","title":"The_One  博客辗转经历"},{"content":"【前端基础】 0.0 简介 本文章是本人系统学习前端知识的开头 希望我能够坚持不懈,不放弃的学习下去.\nHTML是一个文本标记语言,是一种创建页面的标记语言.\n有浏览器来解析,可以理解为运行在浏览器上面的语言.\n前端三剑客学习基本方向. HTML重点\n掌握语义化。 见 HTML标签语义化标签内容 区分块级和内联标签(行内元素)。\u0026gt; 见2.5元素得显示模式 CSS重点\n盒子模型 见 2.7[重点]CSS盒子模型 定位 见 2.CSS \u0026raquo; 定位 层级 z-index：1； 过渡 动画 transform CSS常见布局 flex sass,less JavaScript重点，红宝书看一遍掌握基础。 进阶去看《你不知道的 JavaScript》。别搞那么多, 每个知识点搞懂。ES6基本没啥问题。 下面几个问题优搞懂，优先级如下：\nthis 用法，相关原理 原型/原型链 闭包 面向对象相关 同步异步/回调/promise/async、await 模块化 CommonJS, AMD web标准\n让不同的浏览器渲染能够呈同一效果,这个就是web标准 web标准分为三部分\nhtml ==\u0026gt; 页面元素 css ==\u0026gt; 页面样式 javas ==\u0026gt; 页面交互 1.0 html内容 HTML基本知识 1 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 也可以这样写,因为如果你希望用XHTML和XML来打开你的页面得话, \u0026ldquo;/\u0026rdquo; 是必须的要写的.\n1 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; HTML5中,我们其实可以省略 html标签 和 body 标签.\n但是不建议删除这两个标签,因为这两个标签很重有,尤其是 html标签,是文本得根元素.它是规定页面语言得理想位置.\n1 2 3 4 5 \u0026lt;html lang=\u0026#34;en-US\u0026#34;\u0026gt; 省略 \u0026lt;html\u0026gt; 或 \u0026lt;body\u0026gt; c可令 DOM 和 XML 软件崩溃。 省略 \u0026lt;body\u0026gt; 会在老式浏览器（IE9）中产生错误。 ​\n但是再HTML5中 head 标签 是可以省略得. 通过省略head标签可以降低HTML文件得复杂性\n文件后缀使用 .html 或者 .htm_都可以,但是推荐.html_ 作为后缀 html元素语法是开始标签开始和结束标签结束的,两者时间是元素内容. 某些元素具有空内容 大多数的html标签都可以拥有属性 虽说对大小写不敏感,但是推荐属性用小写字母. 每次写前端需要编写的样式:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;!--定义文档类型--\u0026gt; \u0026lt;html\u0026gt;\u0026lt;!--定义为html文档--\u0026gt; \u0026lt;head\u0026gt; \u0026lt;!--\u0026lt;head\u0026gt; 元素包含了所有的头部标签元素. 在 \u0026lt;head\u0026gt;元素中你可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。 可以添加在头部区域的元素标签为: \u0026lt;title\u0026gt;, \u0026lt;style\u0026gt;, \u0026lt;meta\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;script\u0026gt;, \u0026lt;noscript\u0026gt; 和 \u0026lt;base\u0026gt;。 举例常用的几个: \u0026lt;base href=\u0026#34;http://www.runoob.com/images/\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt; // 一般用来链接外部得样式表 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;mystyle.css\u0026#34;\u0026gt; // \u0026lt;style\u0026gt; 你可以直接在这标签中给元素添加样式 \u0026lt;/style\u0026gt; // \u0026lt;meta\u0026gt;没有结束标签,元素中的数据不会再浏览器上显示 \u0026lt;meta http-equiv=\u0026#34;refresh\u0026#34; content=\u0026#34;30\u0026#34;\u0026gt; //每30秒刷新页面 // \u0026lt;script\u0026gt;\u0026lt;/script\u0026gt; 你可以直接在中写JavaScript代码 --\u0026gt; \u0026lt;!--这里用来引用--\u0026gt; \u0026lt;meta charset=\u0026#34;uft-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;title_name\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;!--定义文档的主体--\u0026gt; \u0026lt;!--注释样式,这里些内容--\u0026gt; \u0026lt;br\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 元素属性 我们来看看 a 标签.\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;!--a标签元素属性herf内容使用双引号--\u0026gt; \u0026lt;a herf = \u0026#34;https://arcaneyaogui.github.io\u0026#34;\u0026gt;YaoGui\u0026#39;s blog\u0026lt;/a\u0026gt; \u0026lt;!--使用单引号也是可以的--\u0026gt; \u0026lt;a herf = \u0026#39;https://arcaneyaogui.github.io\u0026#39;\u0026gt;YaoGui\u0026#39;s blog\u0026lt;/a\u0026gt; \u0026lt;!--但是内容中有双引号的话就必须得用单引号--\u0026gt; 例如：name=\u0026#39;John \u0026#34;ShotGun\u0026#34; Nelson\u0026#39; 补充: target 属性 \u0026gt;\u0026gt; 让a标签的网页从新窗口打开 ------ 锚点定位 -------------- \u0026lt;a herf = \u0026#39;#hhh\u0026#39;\u0026gt;YaoGui\u0026#39;s blog\u0026lt;/a\u0026gt; \u0026lt;p id = \u0026#34;hhh\u0026#34;\u0026gt;\u0026lt;/p\u0026gt; 删除a标签下默认的下划线\n1 a{ text-decoration: none; } 常用基本标签 常用的格式化标签\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;!-- 但是strong比b标签更加粗 --\u0026gt; \u0026lt;strong\u0026gt;加粗\u0026lt;/strong\u0026gt; or \u0026lt;b\u0026gt;加粗\u0026lt;/b\u0026gt; \u0026lt;!-- 推荐使用\u0026lt;em\u0026gt;标签 --\u0026gt; \u0026lt;em\u0026gt;倾斜\u0026lt;/em\u0026gt; or \u0026lt;i\u0026gt;倾斜\u0026lt;/i\u0026gt; \u0026lt;!-- 推荐使用\u0026lt;del\u0026gt;标签 --\u0026gt; \u0026lt;del\u0026gt;删除线\u0026lt;/del\u0026gt; \u0026lt;s\u0026gt;删除线\u0026lt;/s\u0026gt; \u0026lt;!-- 推荐使用\u0026lt;ins\u0026gt;标签 --\u0026gt; \u0026lt;ins\u0026gt;下划线\u0026lt;/ins\u0026gt; or \u0026lt;u\u0026gt;\u0026lt;/u\u0026gt; sup and sub sub标签是下标文本 sup标签是上标文本\n1 log\u0026lt;sub\u0026gt;2\u0026lt;/sub\u0026gt; 16 = 2\u0026lt;sup\u0026gt;2\u0026lt;/sup\u0026gt; border边框 常用写法\n1 border: 1px solid red; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;style\u0026gt; p.none {border-style:none;} p.dotted {border-style:dotted;} p.dashed {border-style:dashed;} p.solid {border-style:solid;} p.double {border-style:double;} p.groove {border-style:groove;} p.ridge {border-style:ridge;} p.inset {border-style:inset;} p.outset {border-style:outset;} p.hidden {border-style:hidden;} \u0026lt;/style\u0026gt; \u0026lt;p class=\u0026#34;none\u0026#34;\u0026gt;无边框。\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;dotted\u0026#34;\u0026gt;虚线边框。\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;dashed\u0026#34;\u0026gt;虚线边框。\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;solid\u0026#34;\u0026gt;实线边框。\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;double\u0026#34;\u0026gt;双边框。\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;groove\u0026#34;\u0026gt; 凹槽边框。\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;ridge\u0026#34;\u0026gt;垄状边框。\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;inset\u0026#34;\u0026gt;嵌入边框。\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;outset\u0026#34;\u0026gt;外凸边框。\u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;hidden\u0026#34;\u0026gt;隐藏边框。\u0026lt;/p\u0026gt; 绝对长度单位和相对长度单位. 【重点】 **div ** div标签是标签是独占一行 一般div配合css完成网页的基本布局。\n**span ** 标签一行可以有多个 一般配合css修改网页中的布局信息\ndiv是一个容器级标签，而span是一个文本级标签。 容器级标签 可以嵌套其他所有标签 **文本级标签 ** 只能嵌套文字，图片，超链接。\n常见的容器级标签：\n1 \u0026lt;div\u0026gt;/\u0026lt;h\u0026gt;/\u0026lt;ul\u0026gt;/\u0026lt;ol\u0026gt;/\u0026lt;dl\u0026gt;/\u0026lt;li\u0026gt;/\u0026lt;dt\u0026gt;/\u0026lt;dd\u0026gt;... 常见的文本级标签:\n1 \u0026lt;span\u0026gt;/\u0026lt;b\u0026gt;/\u0026lt;u\u0026gt;/\u0026lt;i\u0026gt;/\u0026lt;s\u0026gt;/\u0026lt;strong\u0026gt;/\u0026lt;em\u0026gt;/\u0026lt;ins\u0026gt;/\u0026lt;del\u0026gt;... 那么块级元素和行内元素有什么区别？\n块级元素会独占一行,总是在新的一行.\n行内元素不会独占一行。\n图像标签 1 \u0026lt;img src=\u0026#34;pulpit.jpg\u0026#34; alt=\u0026#34;Pulpit rock\u0026#34; width=\u0026#34;304\u0026#34; height=\u0026#34;228\u0026#34;\u0026gt; 属性 src 图片路径 必须属性 alt 文本 图片不能显示的时候,显示的文字文本. title 文本 提示文本，鼠标放到图片上，显示的文字。 width 像素 图像宽度 hight 像素 图像高度 border 像素 设置图像边框 图片路径问题\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 -- 相对路径 同一级路径： \u0026lt;img src = \u0026#34;picture.jpg\u0026#34; /\u0026gt; 下一级路径 \u0026lt;img src = \u0026#34;同级文件名/picture.jpg\u0026#34; /\u0026gt; 上一级路径: \u0026lt;img src = \u0026#34;../picture.jpg\u0026#34; /\u0026gt; -- 绝对路径 就是图片原本在计算机上存在的文件路径. -- 网络上的绝对路径 表格标签 基本表格\n1 2 3 4 5 6 7 8 9 10 \u0026lt;table border=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;row 1, cell 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;row 1, cell 2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;row 2, cell 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;row 2, cell 2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; 合并单元格\n竖着合并叫做跨行合并 \u0026raquo; rowspan\n横着合并叫做跨列合并 \u0026raquo; clospan\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;table border=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td rowspan = \u0026#34;2\u0026#34;\u0026gt;row 1, cell 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;row 1, cell 2\u0026lt;/td\u0026gt; \u0026lt;td clospan = \u0026#34;2\u0026#34;\u0026gt;row 1, cell 3\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;row 2, cell 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;row 2, cell 2\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;row 2, cell 3\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; 表格常用属性 属性名 属性值 描述 align left,center,right 规定表格相对周边元素的对齐方式. border 表格边框 规定表格是否有边框,定义边框宽度,默认\u0026quot;\u0026ldquo;表示没有 cellpadding 像素值 规定单元边沿其内容之间的空白,默认1像素 cellspacing 像素值 规定单元格之间的空白,默认2像素 width 像素值或者百分比 规定表格的宽度 表单 1 2 3 \u0026lt;form\u0026gt; 表单域,这部分记录的内容可以被发送. \u0026lt;/form\u0026gt; input标签常用属性\n1 2 3 4 5 6 7 8 9 \u0026lt;input type=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;!-- type name 定义input元素名称 value 规定input的值 checked 默认勾选 maxlength 输入字段的最大数 placeholder 提示字体 required 必须填写的输入框 --\u0026gt; 勾选框设置默认选中\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;form action=\u0026#34;\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;FirstName\u0026#34; placeholder=\u0026#34;First Name\u0026#34; required /\u0026gt;\u0026lt;br\u0026gt; \u0026lt;p\u0026gt;你喜欢哪个水果？\u0026lt;/p\u0026gt; \u0026lt;!--checked 默认勾选--\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input name=\u0026#34;fruit\u0026#34; type=\u0026#34;radio\u0026#34; value=\u0026#34;苹果\u0026#34; checked/\u0026gt;苹果 \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input name=\u0026#34;fruit\u0026#34; type=\u0026#34;radio\u0026#34; value=\u0026#34;梨\u0026#34; /\u0026gt;梨 \u0026lt;/label\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;p\u0026gt;你喜欢的蔬菜有哪些？\u0026lt;/p\u0026gt; \u0026lt;!--checked 默认勾选--\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input name=\u0026#34;vegetables\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;菠菜\u0026#34; checked/\u0026gt;菠菜 \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input name=\u0026#34;vegetables\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;空心菜\u0026#34; /\u0026gt;空心菜 \u0026lt;/label\u0026gt; \u0026lt;label\u0026gt;\u0026lt;input name=\u0026#34;vegetables\u0026#34; type=\u0026#34;checkbox\u0026#34; value=\u0026#34;花菜\u0026#34; /\u0026gt;花菜 \u0026lt;/label\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; button中又submit按钮,点击,则会发送数据到form表单action属性中的地址之中.\n1 2 3 4 5 \u0026lt;form action=\u0026#34;服务器地址\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;FirstName\u0026#34; placeholder=\u0026#34;First Name\u0026#34; required /\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; iframe 标签 这个标签可以在一个页面中嵌套另一个页面.\nvar()函数 var() 函数用于插入自定义的属性值，如果一个属性值在多处被使用，该方法就很有用。\n1 var(custom-property-name, value) custom-property-name 是必需的, 自定义属性的名称，必需以 \u0026ndash; 开头。\nvalue 可选。备用值，在属性不存在的时候使用。\n例如:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 :root { --main-bg-color: coral; --main-txt-color: blue; --main-padding: 15px; } #div1 { background-color: var(--main-bg-color); color: var(--main-txt-color); padding: var(--main-padding); } #div2 { background-color: var(--main-bg-color); color: var(--main-txt-color); padding: var(--main-padding); } var()函数设置备用颜色\n1 var(--xxx-xx,red); // 前面的名字拼错,直接调用备色 2.0_CSS 2.1 css的书写格式 书写CSS请尽量按照以下顺序:\n1 2 3 4 5 6 7 8 9 10 11 12 13 1.布局定位属性 display/position/float/clear/visibility/overflow 2.自身属性: width/height/margin/padding/border/background 3.文本属性 color/font/text-decoration/text-align/vertical-align white-space/break-word 4.其他属性(CSS3) content/cursor/border-radius/box-shadow/text-shadow background:linear-gradient..... CSS (Cascading Style Sheets) 用于渲染HTML元素标签的样式。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!--一般不建议在元素后设定css --\u0026gt; \u0026lt;body style=\u0026#34;background-color:antiquewhite;\u0026#34;\u0026gt; \u0026lt;p style=\u0026#34;color: blue;\u0026#34;\u0026gt;这是段落标签\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;stely\u0026gt; \u0026lt;!--元素与大括号也保留一个空格 --\u0026gt; p { \u0026lt;!--冒号后面保留一个空格 --\u0026gt; color: red; font-size: 25px; } \u0026lt;/stely\u0026gt; 2.2 CSS选择器 CSS字体属性 字体一般定义在这个标签中.\n1 2 3 4 5 6 7 8 9 10 11 12 13 p { //字体名字有空格,用引号括住 font-family:\u0026#34;Microsoft Yahei\u0026#34; // 一般设定字体大小在body中设置 font-size: 20px; //文字大小 font-weight: 100; //加粗效果,但是后面不用跟 px. } em { // 让倾斜文字不倾斜 front-style: normal; } 文字不加粗\n1 font-weight: 400; /* 文字不加粗 */ 复合属性\n采用简写形式,font属性必须要有 font-size 和 font-family\n1 2 3 /* font: font-style font-weight font-size/line-height font-family */ font: italic 700 16px \u0026#39;Microsoft Yahei\u0026#39; ; CSS文本属性 文本颜色,文本对齐,装饰文本,文本缩进,行间距等\n文本对齐\n1 2 text-align: center; /*三个属性 left ringht center */ 装饰文本\n1 2 3 4 5 6 7 8 9 10 11 /*下划线*/ text-decoration: underline; /*删除线,不常用*/ text-decoration: line-through; /*上划线,几乎不用*/ text-decoration: overline; /*默认,没有装饰线*/ text-decoration: none; 文本缩进\n1 text-indent: 20px; 一本文章每个段落前方都有空格,这个就是缩进.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;style\u0026gt; p { /* 文本第一行缩进多少距离 */ text-indent: 20px; /* text-indent: 2em; 表示缩进当前文字两个文字大小的距离,如果当前元素没有设置大小,则会按照父元素的文字大小,1em=1个文字大小. */ } \u0026lt;/style\u0026gt; \u0026lt;p\u0026gt;11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222 \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333 \u0026lt;/p\u0026gt; 行间距\n控制文字行与行之间的距离\n1 line-height: 26px /* 行高 */ CSS基础选择器 1.标签选择器 1 2 3 4 5 6 7 8 9 \u0026lt;stely\u0026gt; p {color: red; font-size: 25px;} \u0026lt;/stely\u0026gt; \u0026lt;!-- 就是使用标签名作为选择器 优点:可以一次性选择多个相同的标签 缺点:不能设计同种标签的差异化. --\u0026gt; 2.类选择器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;stely\u0026gt; \u0026lt;!-- 类选择器的命名不能使用标签名字 --\u0026gt; .red { color: red; font-size: 25px; } \u0026lt;/stely\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li class = \u0026#34;hhh\u0026#34;\u0026gt;青山不改\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;渌水长流\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;今生失败\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;来生再见\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;!--开发最常用的就是类选择器 --\u0026gt; 一个标签可以有多个类名\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;stely\u0026gt; .red { color: red; } .font25{ font-size: 25px; } \u0026lt;/stely\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;!-- 多个类名中间必须用空格分开 --\u0026gt; \u0026lt;li class = \u0026#34;red font25\u0026#34;\u0026gt;青山不改\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;渌水长流\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;今生失败\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;来生再见\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 3. id选择器 id选择器有着它的唯一性,这是一个规范\nid选择器一般和 JavaScript 搭配使用\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;stely\u0026gt; #red { color: red; } \u0026lt;/stely\u0026gt; \u0026lt;!-- id选择器只能调用一次,被调用之后就不准再被使用 --\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li id = \u0026#34;red\u0026#34;\u0026gt;青山不改\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;渌水长流\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;今生失败\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;来生再见\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 4. 通配符选择器 通配符选择器不用调用,自动给所有元素改样式.\n这也是我们为啥写css开局就写一下代码\n1 2 3 4 5 \u0026lt;!--消除每个元素标签的看不见的内外边距--\u0026gt; *{ margin: 0; padding: 0; } 1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;stely\u0026gt; * { color: red; } \u0026lt;/stely\u0026gt; \u0026lt;!-- --\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li id = \u0026#34;red\u0026#34;\u0026gt;青山不改\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;渌水长流\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;今生失败\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;来生再见\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; CSS样式表 内部样式表\n1 2 3 4 放在html文件的内部 \u0026lt;stely\u0026gt; /* 理论上可以放在html任何地方, 一般放在\u0026lt;head\u0026gt;标签中 */ \u0026lt;/stely\u0026gt; 行内样式表\n1 2 /*记住是双引号,只能控制当前的元素*/ \u0026lt;p style=\u0026#34;color: blue;\u0026#34;\u0026gt;这是段落标签\u0026lt;/p\u0026gt; 外部样式表\n在外部单独放一个CSS文件,后缀为 .css\n1 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; herf=\u0026#34;css文件路径\u0026#34;\u0026gt; Chrome调试工具 Elements\n左边是html代码,右边是CSS代码. 右边的CSS可以改动数值和查看颜色. ctrl+0是复原浏览器原先样式.\n2.3 CSS基础下 1.Emmet语法 按tab按键直接补全标签\n\u0026lt;标签\u0026gt;*个数 可以快速生成多个标签\n父子级关系标签,用\u0026gt;符号,ul\u0026gt;li\n兄弟关系的标签,如div+p,然后tab按键\n#id名+tab按键 .类名+tab按键,默认是div然后直接就有着类名选择器或者id选择器在上面,因为默认是div,如果是别的元素则要在前面加这个元素的名称. 比如:ul\u0026gt;li#id_name + tab按键\n比如: .demo$*5 生成五个dome后有顺序排列的div.\n补充: $符号默认是从1开始自增\n1 2 3 4 5 6 7 8 a{五彩导航栏}*5 结果如下: \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;五彩导航栏\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;五彩导航栏\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;五彩导航栏\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;五彩导航栏\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;#\u0026#34;\u0026gt;五彩导航栏\u0026lt;/a\u0026gt; vscode更改多个标签快捷键\nshift+alt 然后顺着鼠标拖下来,可以同时更改多个相同标签的内容.\n2.快速格式化 vscode 鼠标右键,快速格式化文档.\nvscode 设置 \u0026raquo; emmet.include \u0026raquo; 在settings.json中编辑.\n2.4.CSS复合选择器 1.后代选择器(重要) 后代选择器又被称为包含选择器\n只要是它的后代元素都可以选\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 \u0026lt;style\u0026gt; /*ol中的li文字给成红色*/ ol li{ color: red; } ol li a{ text-indent: none; color: blueviolet; } /* 这样使用类名选择更加精确 */ .hahaha li a{ font-size: 50px; color: aquamarine; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;我是ol的子标签\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是ol的子标签\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a herf=\u0026#34;#\u0026#34;\u0026gt;我是ol的子标签\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;ol class = \u0026#34;hahaha\u0026#34;\u0026gt; \u0026lt;li\u0026gt;我是ol的子标签\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是ol的子标签\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a herf=\u0026#34;#\u0026#34;\u0026gt;我是ol的子标签\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;我是ul的子标签\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是ul的子标签\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是ul的子标签\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; 2.子选择器 只能够选择最近一级的子元素\n1 2 3 4 元素1 \u0026gt; 元素2{样式声明} /* 选择div中最近一级的p标签元素 */ div \u0026gt; p {样式声明} 参考如下代码:\n1 2 3 4 5 6 7 8 9 .hot\u0026gt;a{ color: red; } ---------------------------------------------------------- \u0026lt;div\u0026gt; \u0026lt;a herf=\u0026#34;#\u0026#34;\u0026gt;呵呵哒\u0026lt;/a\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a herf=\u0026#34;#\u0026#34;\u0026gt;hahada\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a herf=\u0026#34;#\u0026#34;\u0026gt;hahada\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/div\u0026gt; 3.并集选择器 并集选择器可以选择多种标签\n1 2 3 4 div, \u0026lt;!-- 并集选择器用逗号来分割 --\u0026gt; p { color: red; } 任何形式的选择器都可以作为并集选择器的一部分\n并集选择器一般推荐竖着写,因为语法规范,一定注意最后一个并集选择器的一部分不需要加逗号.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 div, p, .pig li { color: red; } \u0026lt;div\u0026gt;大头猪\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;小头猪\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;ul class=\u0026#34;pig\u0026#34;\u0026gt; \u0026lt;li\u0026gt;我是ul的子标签\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是ul的子标签\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是ul的子标签\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 4.伪类选择器 伪类选择器用于向某些选择器添加特殊效果,特点是用冒号表示.\n链接伪类\n1 2 3 4 a:link\t/*选择所有未被访问的链接*/ a:visited\t/*选择所有已被访问的链接*/ a:hover\t/*选择鼠标位于其上的链接*/ a:active\t/*选择活动链接(鼠标按下未松开的时候)*/ 为了确保我们的链接伪类生效,要按照顺序来生命\n1 a:link \u0026gt;\u0026gt; a:visited \u0026gt;\u0026gt; a:hover \u0026gt;\u0026gt; a:active //口诀:L-V-H-A 比如我们把body直接定义字体颜色,标签是不会跟随改变的,所以标签的样式要单独更改标签的样式.\n但是平时开发中一般就是先定义a的颜色,然后再定义一个hover的颜色.\n1 2 3 4 5 6 7 8 9 a{ color: #333; text-decoration: none; } a:hover{ color: #369; text-decoration: underline; } :focus 伪类选择器\n:focus伪类选择器,主要是input输入框,焦点是光标. 所以这个伪类选择器主要使用场景是适用于表单.\n1 2 3 input:focus{ background-color: pink; } 2.5元素的显示模式 1.1块元素 1 \u0026lt;h1\u0026gt;~\u0026lt;h6\u0026gt;/\u0026lt;P\u0026gt;/\u0026lt;div\u0026gt;/\u0026lt;ul\u0026gt;/\u0026lt;ol\u0026gt;/\u0026lt;li\u0026gt;/等 块级元素独占一行 高度,宽度,外边距,内边距都可以控制 宽度默认是父级容器的100% 是一个容器及盒子,里面可以放行内元素或者放块级元素 1 2 3 4 5 \u0026lt;div style=\u0026#34;weight:100px\u0026#34;\u0026gt; 我自己独占一行 \u0026lt;/div\u0026gt; 瑟瑟发抖 \u0026lt;!-- 你会发现,哪怕设置div宽度,瑟瑟发抖依旧不能和div再同一行 --\u0026gt; 文字类的元素内不能使用块级元素 p 标签中不能存放 div 标签 同理,其他文字类元素,如h1~h6都不行 1.2行内元素(内联元素) 1 \u0026lt;a\u0026gt;/\u0026lt;strong\u0026gt;/\u0026lt;b\u0026gt;/\u0026lt;em\u0026gt;/\u0026lt;i\u0026gt;/\u0026lt;del\u0026gt;/\u0026lt;s\u0026gt;/\u0026lt;ins\u0026gt;/\u0026lt;u\u0026gt;/\u0026lt;span\u0026gt;等 相邻行内元素在同一行上 宽度和高度直接设置是无效的 默认的宽度就是容器的宽度 行内元素只能容纳文本,或者其他行内元素. 特殊例子\na标签中不能够放其他链接 a里面可以放块级元素,但是最好给a转换一下模式最安全 1.3行内块元素 比如有一下几个特殊的标签:\n1 \u0026lt;img /\u0026gt; , \u0026lt;input /\u0026gt; , \u0026lt;td\u0026gt; 和相邻的行内块元素在一行时,它们之间会有空白缝隙,一行可以显示多个. 默认宽度就是它本身内容的宽度(行内元素特点) 高度,宽度,外边距,内边距都可以控制(块级元素特点) 1.4 元素显示模式的转换 比如想增加 a 标签的出发范围.\n把行内元素转化成块级元素\n1 display:block //行内元素转换为块级元素 因为 a 是行内元素,不能设置宽高,所以可以用这个把a转化成块级元素.\n把块级元素转化成行内元素\n1 display:inline //块级元素转化成行内元素 把其他元素转化成行内块元素\n1 display:inlin-block // 转换成行内块元素 2.6 sinpaste工具 按键F1 \u0026raquo; 用来截图 F3 \u0026raquo; 保存并在桌面置顶 !!! 可以按住 alt 按键用来取色 按下 Esc 取消图片显示 2.6 CSS背景 背景图片\n1 2 3 4 5 /* 可以插入背景图片,也可以用none表示没有 插入图片默认平铺当前父级容器 */ background-image : none | url(); 1 2 3 4 5 6 7 8 9 10 background-repeat:repeat | no-repeat | repeat-x | repeat-y repeat : 背景图片在纵向和横向上平铺 no-repeat : 不平铺 repeat-x : 背景图在横向上平铺 repeat-y : 背景图在纵向平铺 /* 设置图片的方位 程序位置和顺序没有关系 */ background-position: center right; /* x轴和y轴任何一个方位只写了一个,另一个方向都是默认剧中对齐 */ background-position: top; /* 在上方,水平居中 */ 背景图片精确位置 除了上文所说的方位名词,我们也可以像下面这样有着精确位置.\n1 2 3 4 /*只指定一个,必定是X,轴这是默认居中*/ background-position: 20px; /*两个都指定,那么X轴的数据一定在Y轴前面*/ background-position: 50px 20px; 混合单位\n1 2 3 /*反正前面一定是 X轴的参数*/ background-position: 20px center; background-position: center 20px; 背景图像固定位置\n1 2 /* 固定图片位置 */ background-attachment: fixed; scroll 背景随着内容滚动.\nfixed 背景固定,不随着文字内容滚动.\n背景半透明(CSS3新增) 背景色设置半透明,盒子内容不受影响.\n1 2 3 4 5 6 7 8 /* 前三个数字位分别对应red,green,blue,是设置这三个基本色形成的颜色 最后一个参数alpha 表示背景颜色的透明度参数 比如下面的前三个0b */ background: rgba(0,0,0,0.5); /*最后一个参数取值在0-1之间,可以去掉前面的0*/ background: rgba(0,0,0,.5); 2.7 CSS三大特性 1.层叠性 相同的选择器给设置相同的样式,此时一个样式就会覆盖(层叠)另一个冲突的样式,层叠性主要解决样式冲突的问题.\n如下便是一个样式冲突的例子:\n1 2 3 4 5 6 7 8 9 \u0026lt;!-- 1.必须是相同的选择器 2.两个相同的选择器又都给一个属性赋不同的值 --\u0026gt; p {color: red;} p {color: black} \u0026lt;p\u0026gt;\u0026gt;长江后浪推前浪,前浪死在茶汤上.\u0026lt;/p\u0026gt; 所以最后结果是 p 标签是黑色 当属性冲突的时候,哪一个离这个标签更近则会按照那个样式显示\n没有冲突的元素依旧会显示,比如:\n1 2 p {color: red; font-size:20px} p {color: black} 这个时候 p 显示的就是20px的黑色字体.\n综上所述: 这就是CSS的层叠性.\n2.继承性 继承性: 子标签会继承父标签的某些特性\n1 2 3 4 5 6 7 8 9 10 11 12 CSS: div{ color: red; font-size: 30px; } ----------------------------------------------------------------- html: \u0026lt;div\u0026gt; \u0026lt;P\u0026gt;CSS的继承性\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 明明没有设定 p 标签的属性,但是我们设定了 p 标签的父级标签div标签的属性,但是 p 标签仍然是显示出来了,所以说CSS标签具有继承性.\n【重点】但是并不是所有样式都会被继承\n常见的可继承父标签的样式 （text- ，font- ， line- ，color- ） 这些样式可以继承。\n恰当使用继承性可以降低CSS的复杂性\n继承性特殊情况 行高的继承\n1 2 3 4 5 6 7 8 9 body{ color: pink; font-size： 12px/10px \u0026#39;Microsoft YaHei\u0026#39;; } \u0026lt;div\u0026gt;粉红色的回忆\u0026lt;/div\u0026gt; \u0026lt;P\u0026gt;粉红色的回忆\u0026lt;/P\u0026gt; \u0026lt;!-- 首先这种情况,这两个div都会继承bodyCSS中设置的行高 --\u0026gt; 行高继承有一个特殊写法,就是写倍数,不写实际的px值的大小\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 body{ color: pink; /*行高设置成当前文字大小的1.5倍*/ font-size： 12px/1.5 \u0026#39;Microsoft YaHei\u0026#39;; } div { /* 由于设置了行高一点五,所以实际是10px*1.5,也就是15px */ font-size: 10px; } p { /* 由于设置了行高一点五,所以实际是20px*1.5,也就是30px */ font-size: 20px; } \u0026lt;div\u0026gt;粉红色的回忆\u0026lt;/div\u0026gt; \u0026lt;P\u0026gt;粉红色的回忆\u0026lt;/P\u0026gt; 那么看完上面代码有个疑问 如果一个标签没有指定文字大小呢?\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 body{ color: pink; /*行高设置成当前文字大小的1.5倍*/ font-size： 12px/1.5 \u0026#39;Microsoft YaHei\u0026#39;; } div { /* 由于设置了行高一点五,所以实际是10px*1.5,也就是15px */ font-size: 10px; } p { /* 由于设置了行高一点五,所以实际是20px*1.5,也就是30px */ font-size: 20px; } \u0026lt;div\u0026gt;粉红色的回忆\u0026lt;/div\u0026gt; \u0026lt;P\u0026gt;粉红色的回忆\u0026lt;/P\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;!-- 因为li没有指定文字大小,所以会默认继承它父级容器的字体大小,但是ul也没设置,所以ul标签又默认继承body标签的字体大小,所以li标签的字体最后大小是 12px*1.5=18px; --\u0026gt; \u0026lt;li\u0026gt; 我没有指定的文字大小 \u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 3.优先级 当一个元素,指定多个选择器之后,就会又优先级的产生.\n选择器相同,则执行层叠性. 选择器不同,则会按照选择器的权重执行. 表格中下面的选择器,永远大于上面的选择器\n选择器 选择器权重 继承 或者 *(通配符选择器) 0,0,0,0 元素选择器(标签选择器) 0,0,0,1 类选择器,伪类选择器 0,0,1,0 id选择器 0,1,0,0 行内样式style=\u0026rdquo;\u0026quot; 1,0,0,0 !important (重要的) 无穷大 !important的用法 1 div{color: red !important;} // 这样直接加在元素属性后面就好 继承选择器 从上面表格我们指导这个继承选择器权重是0,那什么是继承选择器呢?\n继承选择器例子比如:\n1 2 3 4 5 6 7 8 9 CSS: #father {color: red;} `````````````````````````````````````````````````````` html: \u0026lt;div id = \u0026#34;father\u0026#34;\u0026gt; \u0026lt;p\u0026gt; 我会继承div标签id选择器中的红色. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 那么现在我们另外加一个选择器.\n1 2 3 4 5 6 7 8 9 10 11 CSS: #father {color: red;} p { color: pink; } `````````````````````````````````````````````````````` html: \u0026lt;div id = \u0026#34;father\u0026#34;\u0026gt; \u0026lt;p\u0026gt; 我会继承元素选择器中的粉色. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; 意思是明明 id 选择器权重明明很高,但是这是对于这个父标签而言,对于这个父标签的子标签不起效果.\n[重点]权重的叠加 我们在写代码的时候有个比较有意思的现象,就是 a 标签它居然有默认的蓝色,那是因为浏览器默认帮我们设定好了,类似于下面代码:\n1 a {coolor: blue} 所以我们再使用 a 标签选择器更改颜色时,因为CSS的层叠,就会变成我们设定的样式.\n【符合选择器会有权重叠加问题】\n接下来看下面代码:\n1 2 3 4 5 6 7 8 9 10 11 /* 这是时候 ul li 的权重如下: ul的权重时: 0,0,0,1 li的权重是:0,0,0,1 所以ul li 的权重是0,0,0,1+0,0,0,1=0,0,0,2 所以这个时候ul li的权重就会比 li 的要重 */ ul li{ color： green; } /* 此时li的权重就是单纯的 0,0,0,1 */ li { color: red; } 从上面的代理和注释我们基本就能够知道复合选择器有着权重的叠加性\n那么同理,我们如果是不同的选择器组成的复合选择器也具有一样的效果\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 /* ul li 的权重是0,0,0,1+0,0,0,1=0,0,0,2 */ ul li{ color：green; } /* 此时li的权重就是单纯的 0,0,0,1 */ li { color: red; } /* .nav li = (.nav权重)+(li的权重) .nav li = 0,0,1 */ .nav li{color: pink} \u0026lt;ul class = \u0026#34;nav\u0026#34;\u0026gt; \u0026lt;li\u0026gt;AAA\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;BBB\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;CCC\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 2.7 [重点] CSS盒子模型 网页布局的重要步骤就是用CSS来摆不同盒子\nborder边框 border-weight: 5px; 边框粗细 border-style: none; 边框样式 solid 实线边框 dashed 虚线边框 dotted 点线边框 border-color 边框颜色 border-collapse:collapse; 表格中的边框合并 border :1px solid red; 简写模式,不用在意顺序. content内容 padding 内边距(盒子边框与内容的距离) padding-top/right/bottom/left; 若是没有写padding值得weight/height,则不会撑开盒子距离 margin 外边距 margin-top/right/bottom/left 外边距典型引用\n让块级盒子实现水平居中\n1.这个块级元素必须设定宽度.| 2.盒子左右外边距设置成 auto\n有如下三种写法:\n1 2 3 4 5 6 1. margin-left: auto; margin-left: auto; 2. margin: auto; 3. margin: 0,auto; 让行内元素居中对齐\n只需要对他们的父标签添加 text-align: center;\n清楚内外边距\n1 2 3 4 *{ margin: 0; padding: 0; } 行内元素尽量只设置左右方向的内外边距,\ndiv盒子加入有height或者width实行,再设置padding属性,就会撑开盒子大小,所以这个时候一般使用margin属性调整边距\n2.8 圆角 and 阴影 圆角\n1 border-radius: length (多少多少px); 推荐设置百分数\n1 比如: border-radius: 50% 盒子阴影\n1 2 3 4 5 box-shadow: h-shadow/v-shadow/blur/spread/color/inset; 必写阴影X轴和Y轴参数: box-shadow: h-shadow v-shadow; 属性值 描述 h-shadow 必需写,水平阴影得位置,允许负值. v-shadow 必须写,垂直阴影得位置,允许负值. blur 可选,模糊距离 spread 可选,阴影的尺寸 color 可选,阴影得颜色. inset 可选,将外部阴影改为内部阴影 盒子阴影不占用空间,不用担心影响布局.\n讲讲color属性和inset属性\ncolor一般不直接设定颜色\n像下面这样设定阴影得颜色具有一定透明一般就会好看许多\n1 box-shadow: 10px 10px rgba(0,0,0,.3); inset这个属性添加后,盒子得阴影就在盒子里面,不添加得话,阴影就是默认再盒子外面.\n1 box-shadow: 10px 10px rgba(0,0,0,.3) inset; 让鼠标移动到div上时显示阴影\n1 2 3 div:hover{ box-shadow: 10px 10px rgba(0,0,0,.3) inset; } 文字阴影\n用的不多,当属性和盒子阴影一样,但没有inset内部\n1 text-shadow: 5px 5px rgba(0,0,0,.3); 2.9 浮动 浮动的盒子之间是没有间隙的. 给任何元素添加浮动,该元素都具有行内块元素的特性.\n1.标准流 标准流就是最基本得标签得默认流动\n比如: 块级元素会独占一行,所以默认从上至下得排列. 行内元素会按照顺序,从左至右顺序排列,碰到父级元素边缘则会自动换行\n2.float 浮动的特性 1.浮动元素会脱离标准流\n创建两个div,明明div是块级元素,我们下面代码也没有把div设置成行内元素或行内块元素,但是给两个div加浮动后,他们自动变成一行内显示了,这也就是浮动元素会让标签脱离标准流.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;style\u0026gt; div { width: 300px; height: 300px; } .dome1 { background-color: red; float: left; } .dome2 { background-color: green; float: right; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;dome1\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;dome2\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; 2.浮动的元素会在一行内显示并且元素顶部对齐\n不管多个盒子,他们的高不相同,但是他们都是顶部对齐.\n3.浮动元素具有行内块元素的特点\n添加浮动的行内标签,默认变成行内块了.\n比如span是行内元素,是没有宽高的,但是加了浮动之后,却可以显示有宽高.\n1 2 3 4 5 6 7 8 9 10 11 12 13 \u0026lt;style\u0026gt; span { float: left; width: 300px; height: 300px; background-color: pink; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;span\u0026gt;span_one\u0026lt;/span\u0026gt; \u0026lt;span\u0026gt;span_two\u0026lt;/span\u0026gt; \u0026lt;/body\u0026gt; 因为行内元素添加浮动具有行内块的优点,所以一个行内元素如果直接添加了浮动,则直接可以设置宽高,不用使用display属性去转换\n浮动的几个注意点 浮动的盒子只会影响后面的标准流,不会影响前面的标准流.\n创建三个div,我只把中间的div设置浮动,由于前面的div是标准流独占一行,所以第二个div会从第二行开始,但是他会影响第三个div,所以第二个和第三个div都是在第二行,并且第二个是盖在第三个div上的\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \u0026lt;style\u0026gt; div { width: 500px; height: 500px; background-color: pink; } .fudong { float: left; width: 300px; height: 300px; background-color: black; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div\u0026gt;我是第一个盒子\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;fudong\u0026#34;\u0026gt;我是第二个盒子\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;我是第三个盒子\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; 父级盒子不一定要定死高度 理想状态,让子盒子撑开父盒子的高度.\n很多情况下父级盒子不方便定死高度,但是盒子浮动又不占有位置,最后但父级盒子高度为0时,就会影响下面的标准流盒子.\n清除浮动 清除浮动说白了就是闭合浮动,让浮动只在父级盒子里面生效.\n额外标签法\n就是在最后一个浮动的盒子后添加一个空的标签,比如我创建一个div,并给这标签添加清除浮动的属性:\n1 \u0026lt;div style=\u0026#34;clear:both\u0026#34; \u0026gt; \u0026lt;/div\u0026gt; 除了使用div,也可以用其他标签,比如\u0026lt; br/ \u0026gt;\n​ 末尾添加的标签必须是块级元素\n缺点:添加一些无意义标签,结构化差劲\n父级添加overflow\n1 属性值: hidden , auto , scroll 一般使用 hidden属性值\n无法显示溢出的部分\n但是无法显示子元素溢出部分,就是有的子元素,超出了父级盒子的区域,那超出的部分就直接被隐藏了,看不见.\n伪元素清楚浮动\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 .类名:after{ content: \u0026#34;\u0026#34;; /*伪类元素默认时行元素,转块级元素*/ display: block; height: 0; clear: both; visibility: hidden; } .类名{ /*IE6 ,7 专有*/ *zoom: 1; } /* 最后父元素调用这个类名 */ 双伪元素清楚浮动\n说白了就是在父级盒子中,最开头和最尾部都插入一个盒子,更符合闭合浮动的思想.\n1 2 3 4 5 6 7 8 9 10 11 12 13 .clearfloat:before,.clearfloat:after { content:\u0026#34;\u0026#34;; /* 此元素会作为块级表格来显示（类似 \u0026lt;table\u0026gt;），表格前后带有换行符。 */ display: table; } .clearfloat:after{ clear:both } .clearfloat{ *zoom: 1; } 【重点】定位 定位 = 定位模式 + 定位偏移.\n定位模式\n1 2 3 4 5 6 7 8 \u0026lt;!-- 定位 position static 静态定位 relative 相对定位 absolute 绝对定位 fixed 固定定位 --\u0026gt; 定位偏移\n位置方的值是允许取负值得\n1 2 top / bottom / left / right 设置像素值可以设置便宜方向的距离 static(静态定位) 说白了就是没有便宜,和标准流一样,使用较少.\nrelative(相对定位) 1.相对于自己原来的地方进行偏移\n2.在原来的位置仍然以标准流的方式自动占有,后买盒子仍然一标准流方式对待便宜盒子的原来位置 说白了就是我偏移走了,但是我的位置依旧没人占,帮我留着在.\n1 2 position: relative; top: ; / bottom ; / left ; / right ; absolute(绝对定位) 绝对定位时相对的是该元素的父元素比较,如果绝对定位的元素没有父元素或者说他的父元素没有定位(比如父元素是标准流) 则根据我们浏览器文档页面进行定位. 如果祖上元素有定位,则以最近一个有定位的祖上元素为准 绝对定位和相对定位不一样,当使用绝对定位飘走后,原位置不再被保留,会被后面的元素按照标准流占有. 1 position: absolute; fixed(固定定位) 以浏览器的可视窗口作为来定位的.\n1 2 3 position: fixed; top:100px; right:40px 和父元素没有关系,始终以浏览器可视窗口为准. 不会随着滚动条的滚动而滚动 固定定位和绝对定位一样不占有位置. 完全可以把固定定位看作一个特殊的绝对定位. 让固定定位紧贴版心区域\n1 2 3 position: fixed; top: 50%; margin-left: 数值px; 粘性定位\n以浏览器可视窗口作为参照点移动 粘性定位占有原先位置 必须添加 top right left bottom其中一个才能够生效. 1 2 position: sticky; top: 10px; 子绝父相的由来 一个盒子里面元素多,所以子级元素使用绝对定位,不会占有位置,能过够再一些图片元素的上方,所以子级元素推荐绝对定位.\n我们想要子元素在某个div中,那么为了约束定位的区域,这个子元素的父元素就得必须加定位.\n但是我们父元素如果加绝对定位 , 那么我们知道绝对定位是不会占有位置得 , 所以父元素底下的元素会飘上页面得结构就乱了 , 所以我们得父级元素只能够加相对定位.\n这个也就是我们得 子绝父相的由来\n总结就是父元素必须要占有位置,子元素不用在父元素中占有位置.\n但是子绝父相不是一层不变 , 自己按照具体需求搭配.\n定位叠放 用来决定那个盒子可以盖住那个盒子.\n只有定位的盒子才有z-index这个属性\n1 2 /* 数值后面是没有单位的 */ 选择器 { z-index: 1; } 数值可以是正整数,负数,或者 0 , 默认是auto. 盒子的数值越大,盒子越靠上,如果值相同,则后来者居上.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 \u0026lt;style\u0026gt; div { width: 300px; height: 300px; position: absolute; background-color: red; } .bigbear_two { margin-top: 100px; margin-left: 100px; background-color: aqua; z-index: 1; } .bigbear_three { margin-left: 200px; margin-top: 200px; background-color: coral; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;bigbear_one\u0026#34;\u0026gt;我是第一个盒子\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bigbear_two\u0026#34;\u0026gt;我是第二个盒子\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;bigbear_three\u0026#34;\u0026gt;我是第三个盒子\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; 定位拓展 1. 绝对定位的盒子居中 前提: 加了绝对定位的盒子 , 是不可以添加margin:auto实现水平居中.\n1 2 3 4 5 /* 假设这个正方形盒子,边长像素200px */ position: absolute; left: 50% margin-left:-100px 行内元素添加绝对或者固定定位,可以直接设置宽高.\n块级元素设置了绝对或者固定定位,如果不给宽高,则默认大小就是内容大小.\n定位和浮动覆盖效果的不同 给一个div添加浮动,他盖在标准流元素上时,不会盖住标准流盒子里面的文字或者图片.\n但是绝对定位(固定定位)会盖住标准流盒子中的内容\n之所以有这个不同,是因为浮动最初得目的就是为了让文字围绕图片而设计得标签,后来才被用于页面布局.\n元素的显示和隐藏 display\n不仅把内容隐藏,连位置都会被后面的标准流元素占有. 也就是说元素使用display隐藏后将不再占有原来的位置.\n1 display:none; // 隐藏元素 visibility\n隐藏内容,但是继续占有原来的位置\n1 2 visibility: visble; 元素可见 visibility: hidden; 元素隐藏 overflow\n对溢出的部分进行隐藏和现实\n1 2 3 4 overflow: visible; 现实元素溢出的内容 overflow: hidden; 不显示元素溢出的内容 overflow: auto; 在需要的时候添加滚动条 overflow: scroll; 溢出部分现显示滚动条 3.0 CSS高级技巧 1. 精灵图(sprites) 精灵图也叫做雪碧图\n核心原理: 将我们网页将要用的图片全部放到一张大图片里面总,这样我们只用一次请求,就把图片拿到了,减少了服务器的请求次数,减轻服务器压力\n1 background-position: -100px 0; 我们可以直接在background属性里面连写\n1 background: url(图片路径) no-repeat -100px 0; 2.字体图标 字体图标表面上时图标,本质上属于文字,可放大缩小,改颜色.\n字体图标网站\n阿里iconfont字库 icomoon字库\n下载好图标后,把font文件夹放到我们页面的根目录下面.\n3.三角形的写法 把宽高设置成 0 , 四个边框设置不同颜色, 会发现都是三角形得样式.\n1 2 3 4 5 6 7 8 9 div { /* display: inline-block; */ width: 0; height: 0; border-top: 50px solid black; border-left: 50px solid pink; border-bottom: 50px solid red; border-right: 50px solid blue; } 那么只要一个三角形得思路便是把其他三个边框设置透明.\n1 2 3 4 5 6 7 div { /* display: inline-block; */ width: 0; height: 0; border: 50px solid transparent; border-top-color: pink; } 试了试,不设置宽高,直接把div元素编程行内块元素显示也可以.\n4.鼠标样式 cursor 鼠标悬浮上去改变鼠标得样式\n1 2 3 4 5 6 7 \u0026lt;ul\u0026gt; \u0026lt;li style = \u0026#34;cursor: default;\u0026#34;\u0026gt;默认鼠标样式\u0026lt;/li\u0026gt; \u0026lt;li style = \u0026#34;cursor: pointer;\u0026#34;\u0026gt;鼠标小手形状样式\u0026lt;/li\u0026gt; \u0026lt;li style = \u0026#34;cursor: move;\u0026#34;\u0026gt;鼠标的移动样式\u0026lt;/li\u0026gt; \u0026lt;li style = \u0026#34;cursor: text;\u0026#34;\u0026gt;鼠标文本样式\u0026lt;/li\u0026gt; \u0026lt;li style = \u0026#34;cursor: not-allowed;\u0026#34;\u0026gt;鼠标禁止样式\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 5. 轮廓线 outline 1 2 3 4 5 6 \u0026lt;style\u0026gt; input{ /*取消表单边框*/ outline: none; } \u0026lt;/style\u0026gt; 6.防止拖拽文本域 1 2 3 4 5 6 7 8 \u0026lt;style\u0026gt; textarea{ /*取消文本域的拖拽*/ resize: none; } \u0026lt;/style\u0026gt; \u0026lt;!-- textarea的开始标签和结束标签最好在一行 --\u0026gt; \u0026lt;textarea\u0026gt; \u0026lt;/textarea\u0026gt; 7. vertical-aline 只针对行内元素或者行内块元素,让他们垂直居中.\n1 2 3 vertical-aline: middle; /*中线对齐*/ vertical-aline: bottom;\t/*底线对齐*/ vertical-aline: top;\t/* 顶线对齐 */ 创建一个简单的例子,让图片和文字对齐\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;style\u0026gt; .photo { vertical-align: top; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;img class=\u0026#34;photo\u0026#34; src=\u0026#34;img/huzhang.jpg\u0026#34; alt=\u0026#34;图片错误\u0026#34;\u0026gt; 我喜欢看咒术回战 \u0026lt;/body\u0026gt; 解决方案:\n向上面那样,给图片添加vertical-aline属性 把图片转化成行内块元素 8.溢出文字显示省略号 单行文本溢出显示省略号 1 2 3 4 5 6 7 8 9 10 11 /* 默认的,一行显示不开,就换行 */ wite-space: normal; /* 强制文字显示一行 */ wite-space: nowrap; /* 超出文本自动隐藏 */ overflow: hidden; /*用文字省略号,代替超出部分*/ text-overflow: ellipsis; 多行文本溢出文字显示省略号 1 2 3 4 5 6 7 8 9 10 11 overflow: hidden; text-overflow: ellipsis; /*弹性伸缩盒子模型显示*/ display: -webkit-box; /* 显示第几行显示省略号 */ -webkit-line-clamp: 2; /* 设置或检索伸缩盒子对象的子元素的排列方式 */ -webkit-box-orient: vertical; 9.布局相关技巧 1.margin负值的运用 消除因浮动造成的两个边框重叠变宽\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;style\u0026gt; ul li { float: left; width: 100px; height: 200px; /* 消除li元素前圆点 */ list-style: none; border: 5px solid red; /* 让所有li像左走5px */ margin-left: -5px; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;dome1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;dome2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;dome3\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;dome4\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;dome5\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; 上面的原理是让右边一个 li 盒子的边框,压住左边盒子的右边框使得边框不因浮动而变粗,但是我们给每个 li 盒子添加鼠标浮动样式的时候,被压住的盒子的右边框不会改变样式,解决方法如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;style\u0026gt; ul li { position: relative; float: left; width: 100px; height: 200px; /* 消除li元素前圆点 */ list-style: none; border: 5px solid red; margin-left: -5px; } /* 当这个盒子中没有其他元素定位时 */ /* ul li:hover { position: relative; border-color: green; } */ /* 但这个盒子中有其他元素定位时 */ ul li:hover { z-index: 1; border-color: green; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;dome1\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;dome2\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;dome3\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;dome4\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;dome5\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; 10.三角形巧妙运用 任意形状的三角形设置\n1 2 3 4 5 6 7 div { width: 0; height: 0; border-top: 100px solid transparent; border-right: 30px solid pink; } HTML5新特性 HTML语义化标签 我的理解:\n我觉得标签的语义化更像是人与人之间会根据人的特性取外号,比如我比较憨,外号大憨.别人一听二傻子不仅知道是指我这个人,哪怕不知道也能明白这个叫二傻子的人应该比较傻.\n甚至可以用语义化展开一套新的html得写法\nsection元素 节（section）是有主题的内容组，通常具有标题 可以将网站首页划分为简介、内容、联系信息等节\n说白了就是划分网站不同位置显示不容内容的元素\n默认独占一行,是块元素\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;!-- section标签 --\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h1\u0026gt;FFA_one\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; section标签将不同文字再页面中分成一节一节得方式来显示, 不仅美观,而且让浏览器能够知道则就是一节文字,让浏览器知道 这个一节得文字得标题就是FFA_one.这些合适标签能够让浏览器 十分容易的分辨出来. \u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;section\u0026gt; \u0026lt;h1\u0026gt;FFA_one\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; section标签将不同文字再页面中分成一节一节得方式来显示, 不仅美观,而且让浏览器能够知道则就是一节文字,让浏览器知道 这个一节得文字得标题就是FFA_two.这些合适标签能够让浏览器 十分容易的分辨出来. \u0026lt;/p\u0026gt; \u0026lt;/section\u0026gt; article元素 article元素规定独自包含内容\n文档具有器自身的意义,并且可以独立于网站其他内容进行阅读.\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;article\u0026gt; \u0026lt;h1\u0026gt;标题\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; 这个里面用来显示论坛,博客,新闻,的长篇文字内容. 这个里面用来显示论坛,博客,新闻,的长篇文字内容. 这个里面用来显示论坛,博客,新闻,的长篇文字内容. 这个里面用来显示论坛,博客,新闻,的长篇文字内容. 这个里面用来显示论坛,博客,新闻,的长篇文字内容. 这个里面用来显示论坛,博客,新闻,的长篇文字内容. \u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; 默认独占一行,我觉得是块状元素\nheader元素 heard元素应该被用作介绍性的容器\n1 2 3 4 5 6 7 8 9 \u0026lt;article\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;文章标题\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;文章内容如下:\u0026lt;/p\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;p\u0026gt; balabalabala.... \u0026lt;/p\u0026gt; \u0026lt;/article\u0026gt; footer元素 1 2 3 4 5 6 7 8 \u0026lt;footer\u0026gt; \u0026lt;p\u0026gt;文章作者:YaoGui\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Contact information: \u0026lt;a href=\u0026#34;mailto:someone@example.com\u0026#34;\u0026gt; someone@example.com \u0026lt;/a\u0026gt;. \u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; nav 导航栏标签 nav元素 定义导航链接集合。\nnav元素 旨在定义大型的导航链接块。 不过，并非文档中所有链接都应该位于 nav元素中！\n1 2 3 4 5 6 \u0026lt;nav\u0026gt; \u0026lt;a href=\u0026#34;/html/\u0026#34;\u0026gt;HTML\u0026lt;/a\u0026gt; | \u0026lt;a href=\u0026#34;/css/\u0026#34;\u0026gt;CSS\u0026lt;/a\u0026gt; | \u0026lt;a href=\u0026#34;/js/\u0026#34;\u0026gt;JavaScript\u0026lt;/a\u0026gt; | \u0026lt;a href=\u0026#34;/jquery/\u0026#34;\u0026gt;jQuery\u0026lt;/a\u0026gt; \u0026lt;/nav\u0026gt; aside元素 比如你接下来要写得区域是页面主内容之外得内容,那么我们应该使用aside元素(比如侧边栏里面的内容)\n1 2 3 4 5 6 \u0026lt;p\u0026gt;这是非页面主内容\u0026lt;/p\u0026gt; \u0026lt;aside\u0026gt; \u0026lt;h4\u0026gt;非主内容标题\u0026lt;/h4\u0026gt; \u0026lt;p\u0026gt; 非页面主要内容的一些相关性内容 \u0026lt;/p\u0026gt; \u0026lt;/aside\u0026gt; figure and figcaption 元素 figure元素作用是将标题或者文字内容 和 图片放在一起\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt; balabala... \u0026lt;/p\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;图片路径\u0026#34; alt=\u0026#34;The Pulpit Rock\u0026#34; width=\u0026#34;304\u0026#34; height=\u0026#34;228\u0026#34;\u0026gt; \u0026lt;figcaption\u0026gt; 图片下得文字,balabalal... \u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 我们上面几个标签简单组合一下\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \u0026lt;article style=\u0026#34;border: 5px solid red;\u0026#34;\u0026gt; \u0026lt;header\u0026gt; \u0026lt;H1\u0026gt;标题\u0026lt;/H1\u0026gt; \u0026lt;p\u0026gt; 内容如下所述: \u0026lt;/p\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;p\u0026gt; 这块是内容 balabala.... \u0026lt;/p\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;img/huzhang.jpg\u0026#34; alt=\u0026#34;The Pulpit Rock\u0026#34; width=\u0026#34;304\u0026#34; height=\u0026#34;228\u0026#34;\u0026gt; \u0026lt;figcaption\u0026gt;我的名字叫做虎杖悠人.\u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;footer\u0026gt; \u0026lt;p\u0026gt;文章作者:YaoGui\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Contact information: \u0026lt;a href=\u0026#34;mailto:someone@example.com\u0026#34;\u0026gt; someone@example.com\u0026lt;/a\u0026gt;.\u0026lt;/p\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/article\u0026gt; CSS 3 新特性 1.新增选择器 1.1 属性选择器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 /* 选择input中的value这个属性 */ input [value] { color: pink; } \u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;请输入用户名\u0026#34;\u0026gt; /* 选择属性里面的值 重点*/ input [type=text]{ color: red; } \u0026lt;input type=\u0026#34;text\u0026#34; value=\u0026#34;请输入用户名\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;\u0026#34;\u0026gt; /* 选择某类名开头xxx的元素 */ div[class^=icon]{ /* 将类名中时icon开头的元素修改成红色 */ color: red; } \u0026lt;div class=\u0026#34;icon1\u0026#34;\u0026gt;icon1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;icon2\u0026#34;\u0026gt;icon2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;icon3\u0026#34;\u0026gt;icon3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;kkicon\u0026#34;\u0026gt;icon4\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;我是打酱油的div\u0026lt;/div\u0026gt; /* 选择某类名结尾是xxx的元素 */ div[class$=icon]{ color: red; } \u0026lt;div class=\u0026#34;icon1\u0026#34;\u0026gt;icon1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;icon2\u0026#34;\u0026gt;icon2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;icon3\u0026#34;\u0026gt;icon3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;kkicon\u0026#34;\u0026gt;icon4\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;我是打酱油的div\u0026lt;/div\u0026gt; /*选中类名中带有xxx的元素*/ div[class*=icon]{ color: red; } \u0026lt;div class=\u0026#34;icon1\u0026#34;\u0026gt;icon1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;icon2\u0026#34;\u0026gt;icon2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;icon3\u0026#34;\u0026gt;icon3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;kkicon\u0026#34;\u0026gt;icon4\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;我是打酱油的div\u0026lt;/div\u0026gt; 像这种新增的选择器,同样有着权重叠加\n加比如像 div[class*= xxx ] 权重是 0,0,0,1(div-标签选择器) + 0,0,1,0(class-类选择器) = 0,0,1,1\n2.2 结构伪类选择器 伪类选择器常用于根据文档结构来选择元素,常用于根据父级选择器里面的子元素.\n选择符 作用简介 E:first-child 匹配父元素中的第一个子元素 E E:last-child 匹配父元素中最后一个子元素 E E:nth-child(n) 匹配父元素中第 n 个子元素 E , n 可以是数字,关键字 和 公示. E:first-of-type 指定类型 E 得第一个 E:last-of-type 指定类型 E 得最后一个 E:nth-of-type(n) 指定类型 E 得第 n 个 结构伪类选择器上半部分 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 \u0026lt;style\u0026gt; /* 选择ul中第一个li标签中的元素 */ ul li:first-child { background-color: blue; } /* 选择ul中最后一个li标签中的元素 */ ul li:last-child { background-color: red; } /* 选择ul中第五个li标签中的元素 */ ul li:nth-child(5){ background-color: pink; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;我是第1个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第2个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第3个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第4个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第5个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第6个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第7个孩子\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; **nth-child(n) n使用关键字 **\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 /* 让ul里面偶数得li都显示红色 */ ul li:nth-child(even) { background-color: red; } /* 让ul里面奇数得li都显示红色 */ ul li:nth-child(odd) { background-color: blue; } ---------------------------------------------- \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;我是第1个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第2个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第3个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第4个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第5个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第6个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第7个孩子\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; nth-child(n) 其中 n 使用公式\n使用公示表示得时候,nth-child里面得字母只能是n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 \u0026lt;style\u0026gt; /* 不就是2*n 相当于选择2,4,6,8 */ ul li:nth-child(2n){ background-color: pink; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;我是第1个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第2个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第3个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第4个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第5个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第6个孩子\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;我是第7个孩子\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; nth-child如果只写了 n , 那么就是从0开始依次递增得选择,0和超出得那个就别忽略,相当于写 nth-child(n) 就表示是全选.\n记住,n永远从 0 开始递增\nnth-child 一些简单公示 公示代表的含义 2n 偶数 2n+1 奇数 5n 5,10,15\u0026hellip;\u0026hellip; n+5 从第五个开始(包含第五个),一直到到最后一个元素 -n+5 前五个{(-0+5),(-1+5),(-2+5)\u0026hellip;..} 结构伪类选择器下半部分 1 2 3 4 /* 这三个选择器,是把所有元素进行排列. */ E:first-child/E:last-child/E:nth-child(n) nth-child 是先找第几个再看是不是和选择器中的元素是一样的,不是一样就修改样式失败\nnth-of-type 是先找选择器中标签再找第几个.\n从下列代码中就可以看出区别\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 \u0026lt;style\u0026gt; section div:nth-child(1) { background-color: pink; } section div:nth-of-type(2) { background-color: blue; } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;section\u0026gt; \u0026lt;p\u0026gt;我是大灰狼一号\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;我是大灰狼二号\u0026lt;/p\u0026gt; \u0026lt;div\u0026gt;我是熊大一号\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;我是熊大二号\u0026lt;/div\u0026gt; \u0026lt;/section\u0026gt; \u0026lt;/body\u0026gt; 3.3 新增伪元素选择器 伪类选择器可以帮助我们利用CSS创建标签,而不是html\n选择符号 作用简介 ::before 在元素内部得前面插入内容 ::after 在元素内部得后面插入内容 before 和 after 都创建一个元素,该元素属于行内元素 由于新创建元素再文档树中找不到,我们称为为元素 语法样式 : element::before{} before 和 after 都必须要有content属性 before在父元素内容的前面创建元素,after在父级元素内容的后面插入元素 伪元素选择器和标签选择器一样,权重为 1 前面两个冒号和标签之间不能有空格 伪元素清楚浮动 1 2 3 4 5 6 7 8 9 .clearfloat::after{ /* content 单双引号都以了 */ content: \u0026#34;\u0026#34;; /* 因为添加得伪元素不是块级元素 */ display: block; height: 0; clear: both; visibility: hidden; } 2.0 [重点] CSS3盒模型 默认的盒子模型\n1 2 // 就是width + padding + border(默认盒模型) box-sizing:content-box; CSS3新型盒子模型\n1 box-sizing:border-box; 好处是,在padding值+border值\u0026lt;width宽度(盒子宽度)的前提下 增加padding和border的值,不会撑大我们的盒子.\n那么我们新的初始化方式\n1 2 3 4 5 *{ margin: 0; padding: 0; box-sizing: border-box; } 3.0 calc函数 比如用calc行数，让我们子元素宽度永远只比父元素小80px像素\n1 2 /* 括号中可以进行一些加减乘除的运算 */ width：calc（100%-80px） 4.0【重点】过渡 过渡经常和 :hover 一起使用\n1 transition: 要过渡的属性 花费的时间 运动曲线 何时开始; 过渡属性: 你想要改变的标签属性 花费时间: 单位是秒(s) 如 0.5s 运动曲线: 就是你想匀速,还是先快后慢,还是先慢后快\u0026hellip;.不写的话默认是 ease(先快后慢) 单位是秒(s) , 可以设置延时触发时间,默认是 0s 1 2 3 4 5 6 7 8 /* 之更改一个样式的时候 */ transition: width 0.5s /* 更改两个样式,中间利用逗号分割 */ transition: width 0.5s,height 0.5s ease 1s /* 想要所有属性变化,写all就好了 */ transition: all 0.5s 5.0 【重点】2D转换 transform （转换） 用来实现元素的位移，旋转，缩放等效果。\n这个2D讲究的是再二维坐标系中进行转换，我们也有三维坐标系，当然三维坐标系等我们学完动画之后在讲。\n1.移动属性（translate） 语法格式如下\n1 2 3 4 5 6 7 8 9 10 11 12 13 /* X轴坐标和Y轴坐标可以一起写 */ transform: translate(X,Y); /* 两轴参数分开定义，后面的X Y 必须是大写 */ transform: translateX(n); transform: translateY(n); /* 这个百分比的移动是相对于自身元素的 */ /* 比如这个盒子是300px的正方形 那么移动的 50% 表示移动 150px */ transform: translate(50%,50%); translate 不会影响其他元素位置。\ntranslate里面数值是百分数,移动距离这是自身长度*百分数\n2.旋转属性(rotate) 基本用法\n当rotate中是正值的时候,顺时针旋转. 当rotate中是负值的时候,逆时针旋转.\n1 transform: rotate(45deg); 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;style\u0026gt; img { width: 150px; /* 顺时针旋转45度 */ transform: rotate(45deg); } \u0026lt;/style\u0026gt; \u0026lt;body\u0026gt; \u0026lt;img src=\u0026#34;img/huzhang.jpg\u0026#34; alt=\u0026#34;虎杖\u0026#34;\u0026gt; \u0026lt;/body\u0026gt; 3 scale(倍数) 将宽高变成原来的两倍.\n1 transform: scale(2,2); 将宽高变成原来的一半\n1 transform: scale(0.5,0.5); 当然如果两个数值相同,可以缩写\n1 transform: scale(2); / transform: scale(0.5); 这个scale最大的优点同样是不会影响其他的盒子,并且还可以自己设置放大的中心点.\n自行设置放大的中心点\n比如设置以左下角为中心放大和缩小\n1 transform-origin: left bottom; 4.transform缩写 比如有多个属性,可以用空格隔开进行缩写.\n1 transform: translate(150px,50px) rotate(45deg); 注意:有位移和其他属性同时存在的时候,位移要放在第一位,因为如果先旋转之后再位移的话,就会因为旋转角度的改变,导致位移方向发生改变.\n6.0【重点】动画 设置多个节点，控制一个或者一组动画，常用来实现复杂的动画效果。\n0%是动画开始,100%是动画完成.这样的规则就是动画序列 你可以改变任意多的样式(就是多设置几个节点 20% 50%\u0026hellip;..) 首先我们要定义动画\n1 2 3 4 5 6 7 8 9 10 11 /*定义动画*/ @keyframes move{ /*开始状态*/ 0%{ transform: translateX(0px); } /*结束状态*/ 100%{ transform: translateX(1000px); } } from\u0026hellip;to\n还可以使用关键词from \u0026hellip;.. to\u0026hellip;,同样表示 0% \u0026hellip; 100%\n1 2 3 4 5 6 7 8 9 10 11 /*定义动画*/ @keyframes move{ /*开始状态*/ from{ transform: translateX(0px); } /*结束状态*/ to{ transform: translateX(1000px); } } 然后再调用动画\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 div { width: 200px; height: 200px; background-color: pink; /*调用 动画(move) -- 必须要写*/ animation-name: move; /*调用 动画(move) 完成的时间 --必须要写*/ animation-duration: 2s; /* 规定动画的速率曲线,默认是ease */ animation-timing-function /* 规定动画何时开始 默认是0 */ animation-delay: 1s; /* 设置动画播放次数,可以设置无限循环(infinite) ,默认是1*/ animation-iteration-count: infinite; /* 是否进行逆向播放 */ animation-direction: normal(默认)/alternate(来回跑); /* 动画结束了后让其保持结束状态或者回到起始状态 */ animation-fill-mode: forwards(保持结束)/backward(回到起始); } div: hover { /* 鼠标经过div停止动画,离开后继续动画 */ animation-paly-state: running/paused; } animation 的简写方式\n1 2 animation:动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束状态. 简写动画属性中不包含 animation-play-state animation-play-state: pused; 经常和鼠标经过等其他东西配合 opacity 设置透明度 动画速度曲线 animation-timing-function 速率属性 速率属性的描述 linear 动画从头到尾速率一样,匀速. ease 默认属性 , 动画从低速开始然后加快,在结束前变慢. ease-in 动画以低速开始 ease-out 动画以低速结束 ease-in-out 动画以低速开始和结束 steps() 指定了时间函数中的间隔数量(步长) 重点讲解 steps()\n就是说这个动画从头做到尾需要多少步完成.\nsteps()可以让你自定义多少步完成动画. 有了steps()之后,就不要再写ease 或者 linear; 1 2 3 4 5 /* 文字强制一行显示 */ wite-space: nowrap; /* 动画里面可以简写宽度,分四步完成宽度的变化 */ animation: w 4s steps(4) forwards; 7.0【重点】3D转换 translate3d(x,y,z) 中的 x,y,z都不能省略掉，如果没有就写 0\nX轴：水平向右。 X轴右边是正值，左边是负值。 Y轴： 垂直向下。 y轴下面是正值，上面是负值。 Z轴： 垂直屏幕。 往外面是正值，往里面是负值。 Z轴基本只使用 px 这种精确单位。 translateZ(n) 一般要借助透视才能够肉眼可见的显示 1. 3D转换基本知识 3D位移 ： translate3d(x,y,z) 3D旋转 ： rotate3d(x,y,z) 透视 ： perspective 3d呈现 transfrom-style、 2.透视（perspective） 透视写在被观察元素的父盒子中 透视的单位元素是像素（px）\n通过近大远小模拟3D效果\n1 perspective：500px； 3. 3D旋转 rotate3d 基本语法：\n1 2 3 4 5 6 7 8 9 10 transform: rotateX(45deg); transform: rotateY(45deg); transform: rotateZ(45deg); /* 简写模式 */ /* 沿着X轴旋转 45度 */ transform: (1,0,0,45deg); /* 沿着X 和 Y 轴旋转 45度 */ transform: (1,1,0,45deg); 设定那个轴的值并不是朝这个轴方向旋转，而是以这个轴为中心线旋转。\n4.transform-style 1 2 3 4 5 /*子元素不开启3d立体空间，默认的*/ transform-style：flat； /*子元素开启3d默认空间*/ transform-style：preserve-3d； ","permalink":"https://loyayz.github.io/posts/%E5%89%8D%E7%AB%AFhtml+css%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/","summary":"【前端基础】 0.0 简介 本文章是本人系统学习前端知识的开头 希望我能够坚持不懈,不放弃的学习下去. HTML是一个文本标记语言,是一种创建页面的标记语","title":"前端[HTML+CSS]基础部分"},{"content":"","permalink":"https://loyayz.github.io/about-me/","summary":"","title":""},{"content":"","permalink":"https://loyayz.github.io/links/","summary":"","title":""}]